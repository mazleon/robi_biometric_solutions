# Optimized Dockerfile for FAISS GPU Microservice with performance enhancements
FROM nvidia/cuda:12.2.0-runtime-ubuntu22.04

# Set environment variables to prevent interactive prompts during build
ENV DEBIAN_FRONTEND=noninteractive
ENV PYTHONUNBUFFERED=1

# Install system dependencies
RUN apt-get update && apt-get install -y \
    git \
    cmake \
    build-essential \
    python3-dev \
    python3-pip \
    curl \
    htop \
    && rm -rf /var/lib/apt/lists/*

# Install Python dependencies in optimized order
# Install numpy first for better compatibility
RUN pip install --no-cache-dir numpy==2.3.2

# Install FAISS with GPU support
RUN pip install --force-reinstall --no-cache-dir faiss-gpu==1.12.0

# Install core dependencies
RUN pip install --no-cache-dir \
    fastapi==0.116.1 \
    uvicorn[standard]==0.35.0 \
    pydantic==2.11.7 \
    requests==2.31.0 \
    python-multipart==0.0.20 \
    python-dotenv==1.1.1 \
    aiofiles==24.1.0 \
    pydantic-settings==2.10.1

# Install scientific computing libraries
RUN pip install --no-cache-dir \
    scipy==1.16.1 \
    scikit-learn==1.7.1

# Install optional vector databases
RUN pip install --no-cache-dir \
    chromadb==0.4.24 \
    qdrant-client==1.7.0

# Install monitoring tools
RUN pip install --no-cache-dir \
    psutil==5.9.8

# Set up the working directory
WORKDIR /app

# Copy the application code into the container
COPY . /app/

# Set environment variables for the application
ENV PYTHONPATH=/app

# Create data directory
RUN mkdir -p /app/data

# Expose the port the app runs on
EXPOSE 8001 8002 8003

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=15s --retries=3 \
    CMD curl -f http://localhost:${PORT:-8001}/health || exit 1

# Define the command for running FastAPI application
CMD ["python", "-c", "import os; from main_optimized import app; import uvicorn; uvicorn.run(app, host='0.0.0.0', port=int(os.getenv('PORT', 8001)), log_level='info')"]
